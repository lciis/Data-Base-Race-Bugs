Notes:
	-The fatal error task can be scheduled while processing an offload packet
in NAPI context when the connection handle is bogus. this can race
with the ports being brought down and the cxgb3 workqueue being flushed.
Just cancel any fatal error task schedule after napi was disabled.

Proposed fix:	
	diff --git a/drivers/net/cxgb3/cxgb3_main.c b/drivers/net/cxgb3/cxgb3_main.c
	index 9fdfe0b..7714252 100644
	--- a/drivers/net/cxgb3/cxgb3_main.c
	+++ b/drivers/net/cxgb3/cxgb3_main.c
	@@ -1119,6 +1119,9 @@ static void cxgb_down(struct adapter *adapter)
	 	free_irq_resources(adapter);
	 	flush_workqueue(cxgb3_wq);	/* wait for external IRQ handler */
	 	quiesce_rx(adapter);
	+
	+	/* cancel any fatal error task scheduled in NAPI processing */
	+	cancel_work_sync(&adapter->fatal_error_handler_task);
	 }
	 
	 static void schedule_chk_task(struct adapter *adap)
	@@ -1187,6 +1190,9 @@ static int offload_close(struct t3cdev *tdev)
	 
	 	sysfs_remove_group(&tdev->lldev->dev.kobj, &offload_attr_group);
	 
	+	/* Flush work scheduled while releasing TIDs */
	+	flush_scheduled_work();
	+
	 	tdev->lldev = NULL;
	 	cxgb3_set_dummy_ops(tdev);
	 	t3_tp_set_offload_mode(adapter, 0);
	@@ -1247,8 +1253,7 @@ static int cxgb_close(struct net_device *dev)
	 	spin_unlock_irq(&adapter->work_lock);
	 
	 	if (!(adapter->open_device_map & PORT_MASK))
	-		cancel_rearming_delayed_workqueue(cxgb3_wq,
	-						  &adapter->adap_check_task);
	+		cancel_delayed_work_sync(&adapter->adap_check_task);
	 
	 	if (!adapter->open_device_map)
	 		cxgb_down(adapter);